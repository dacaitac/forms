{"version":3,"sources":["serviceWorker.js","components/Form.js","pages/NewEP.js","index.js"],"names":["Boolean","window","location","hostname","match","url","conf","backURL","port","universities","alert","code","Form","props","fetchData","a","setState","loading","error","fetch","then","res","json","arrUniversities","Object","keys","sort","lc","arrRefs","referal","arrExps","exps","arrCars","careers","cars","handleSubmit","e","preventDefault","tform","state","form","getParams","params","search","l","length","substring","split","map","param","ps","reg","u","str","replace","un","university","value","getURL","program","method","mode","body","JSON","stringify","headers","check","catch","err","changeHandler","event","name","target","lastName","email","pass","phone","exp","prom_code","career","englishLevel","selected_program","source","title","className","bind","this","type","placeholder","pattern","onChange","console","log","opU","key","opRfs","opXps","opCar","deg","engLvl","vExp","gte","default","required","defaultValue","role","id","desc","onSubmit","md","htmlFor","href","color","disabled","React","Component","NewEP","basename","path","component","container","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wxGAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0tBCVN,IAAMC,EAAMC,EAAKC,QAAUD,EAAKE,KAC5BC,EAAe,GACfC,EAAQ,GACRC,EAAQ,GAmWGC,E,YAhWX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAuFVC,UAxFkB,sBAwFN,sBAAAC,EAAA,6DACR,EAAKC,SAAS,CACVC,SAAS,EACTC,MAAO,OAHH,kBAOiBC,MAAMd,EAAI,iBAAiBe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAP5D,OAOJb,EAPI,OAQJ,EAAKO,SAAS,CACVC,SAAS,EACTM,gBAAiBC,OAAOC,KAAKhB,GAAciB,OAC3CC,GAAIlB,EACJmB,QAASC,EAAQA,QACjBC,QAASC,EAAKA,KACdC,QAASC,EAAQC,OAdjB,gDAiBJ,EAAKlB,SAAS,CACVC,SAAS,EACTC,MAAM,EAAD,KAnBL,yDAxFM,EAgHlBiB,aAhHkB,uCAgHH,WAAMC,GAAN,6BAAArB,EAAA,6DACXqB,EAAEC,iBACEC,EAAQ,EAAKC,MAAMC,KAEV,IACTC,EAAY,EAAK5B,MAAM6B,OAAOxC,SAASyC,OACvCC,EAAIH,EAAUI,OACPJ,EAAUK,UAAU,EAAEF,GAAGG,MAAM,KACrCC,KAAI,SAAAC,GACL,IAAIC,EAAKD,EAAMF,MAAM,KACR,QAAVG,EAAG,GAAcZ,EAAMI,OAASQ,EAAG,GACjCZ,EAAMI,OAAS,OAGpBS,EAAM,MAdC,UAeUhC,MAAMd,EAAI,iBAAiBe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAfrD,QAgBX,IAAQ8B,KADR3C,EAfW,OAkBP4C,GADIA,EAAMD,EAAEE,QAAQH,EAAK,KACfG,QAAQH,EAAK,IACvB1C,EAAa4C,GAAO5C,EAAa2C,UAC1B3C,EAAa2C,GAIxBG,GADIA,EAAKjB,EAAMkB,WAAWC,MAAMH,QAAQH,EAAI,KACpCG,QAAQH,EAAI,IACpBb,EAAMX,GAAKlB,EAAc8C,GACzB,EAAKvC,SAAS,CAAEsB,UAEZoB,EAASrD,EAAM,IAAK,EAAKkC,MAAMoB,QACnCxC,MAAMuC,EAAQ,CACVE,OAAQ,OACRC,KAAM,UACNC,KAAMC,KAAKC,UAAL,KAAmB,EAAKzB,MAAMC,OAC7CyB,QAAS,CACR,eAAgB,qCAET7C,MAAK,SAAAC,GAAG,OAAI,EAAKL,SAAS,CAACE,MAAO,EAAGgD,OAAO,OAC9CC,OAAM,SAAAC,GAAG,OAAI,EAAKpD,SAAS,CAACE,MAAO,OArCzB,4CAhHG,wDAwJlBmD,cAAgB,SAAAC,GACZ,IAAMC,EAAOD,EAAME,OAAOD,KACpBd,EAAQa,EAAME,OAAOf,MAE3B,EAAKzC,SAAS,CACZwB,KAAK,EAAD,GACG,EAAKD,MAAMC,KADd,eAEC+B,EAFD,KAGG,EAAKhC,MAAMC,KAAK+B,GAHnB,CAIAd,eA/JN,EAAKlB,MAAQ,CACTC,KAAK,CACD+B,KAAY,CAACd,MAAO,IACpBgB,SAAY,CAAChB,MAAO,IACpBiB,MAAY,CAACjB,MAAO,IACpBkB,KAAY,CAAClB,MAAO,IACpBmB,MAAY,CAACnB,MAAO,IACpBD,WAAY,CAACC,MAAO,IACpBoB,IAAY,CAACpB,MAAO,IACpB5B,QAAY,CAAC4B,MAAO,IACpBqB,UAAY,CAACrB,MAAO,KACpB9B,GAAY,CAAC8B,MAAO,IACpBsB,OAAY,CAACtB,MAAO,IACpBuB,aAAa,CAACvB,MAAO,IACrBwB,iBAAkB,CAACxB,MAAO,IAC1ByB,OAAY,CAACzB,MAAO,MAExB0B,MAAQ,GACRC,UAAY,GACZ1C,OAAQ,IACRiB,QAAS,EAAK9C,MAAM8C,QACpB1C,SAAS,EACTM,gBAAiB,GACjBK,QAAS,GACTE,QAAS,GACTE,QAAS,GACTtB,OAAO,EACPwD,OAAO,EACPhD,MAAO,GAGX,EAAKmD,cAAgB,EAAKA,cAAcgB,KAAnB,gBACrB,EAAKlD,aAAe,EAAKA,aAAakD,KAAlB,gBAlCN,E,iFAqCG,IAAD,OAChBC,KAAKxE,YACL,IAAIwB,EAAQgD,KAAK/C,MAAMC,KAEnBC,EAAY6C,KAAKzE,MAAM6B,OAAOxC,SAASyC,OACvCC,EAAIH,EAAUI,OAalB,OAZWJ,EAAUK,UAAU,EAAEF,GAAGG,MAAM,KACrCC,KAAI,SAAAC,GACL,IAAIC,EAAKD,EAAMF,MAAM,KACR,SAAVG,EAAG,IAA2B,QAAVA,EAAG,KACtBvC,EAAO,2BAAQ4E,KAAK,QACZH,UAAU,eACVb,KAAK,YACLiB,YAAY,4BACZC,QAAQ,UACRC,SAAU,EAAKrB,oBAGvBiB,KAAK/C,MAAMoB,SACf,IAAK,KACDrB,EAAM2C,iBAAmB,CAAExB,MAAO,CAAC,MACnC6B,KAAKtE,SAAS,CACVwB,KAAMF,EACNqB,QAAS,KACTwB,MAAO,oBACPC,UAAW,YAEf,MACJ,IAAK,KACG9C,EAAM2C,iBAAmB,CAAExB,MAAO,CAAC,MACnC6B,KAAKtE,SAAS,CACVwB,KAAMF,EACNqB,QAAS,KACTwB,MAAO,iBACPC,UAAW,YAEnB,MACJ,IAAK,KACG9C,EAAM2C,iBAAmB,CAAExB,MAAO,CAAC,MACnC6B,KAAKtE,SAAS,CACVwB,KAAMF,EACNqB,QAAS,KACTwB,MAAO,qBACPC,UAAW,e,+BAyF3B,IAA0B,IAAvBE,KAAK/C,MAAMtB,QAEV,OADA0E,QAAQC,IAAI,wBACL,0BAGX,IACIC,EADSP,KAAK/C,MAAMhB,gBACPyB,KAAK,SAAAI,GAAC,OACnB,4BAAQ0C,IAAK1C,GAAIA,MAIjB2C,EADUT,KAAK/C,MAAMX,QACLoB,KAAK,SAAAI,GAAC,OACtB,4BAAQ0C,IAAK1C,GAAIA,MAIjB4C,EADUV,KAAK/C,MAAMT,QACLkB,KAAK,SAAAI,GAAC,OACtB,4BAAQ0C,IAAK1C,GAAIA,MAIjB6C,EADWX,KAAK/C,MAAMP,QACLgB,KAAK,SAAAI,GAAC,OACvB,4BAAQ0C,IAAK1C,GAAIA,MAGjB8C,EAAM,GACNC,EAAS,GACTC,EAAO,GACPC,EAA6B,OAAvBf,KAAK/C,MAAMoB,QAA0C,OAAvB2B,KAAK/C,MAAMoB,QAClB,OAAvB2B,KAAK/C,MAAMoB,UAGjByC,EAAO,4BAAQhB,UAAU,eACrBb,KAAK,MACLmB,SAAUJ,KAAKjB,eACf,4BAAQiC,SAAO,GAAf,wCACCN,IAILK,IACAH,EAAM,4BAAQd,UAAU,eACZb,KAAK,SACLmB,SAAUJ,KAAKjB,cACfkC,UAAQ,GACR,4BAASC,cAAY,GAArB,WACCP,GAGbE,EAAS,4BAAQf,UAAU,eACfb,KAAK,eACLmB,SAAUJ,KAAKjB,eACf,4BAASmC,cAAY,GAArB,sBACA,6CACA,8CACA,8CAIhB,IAAIpC,EAAMkB,KAAK/C,MAAMrB,MAEV,IAARkD,EACC1D,EAAQ,yBAAK0E,UAAU,sBAAsBqB,KAAK,SAA1C,oCAGI,IAARrC,IACJ1D,EAAQ,yBAAK0E,UAAU,qBAAqBqB,KAAK,SAAzC,2DAIZ,IAAItB,EAAQG,KAAK/C,MAAM4C,MACvB,OACI,6BACI,6BAAMzE,GACN,yBAAK0E,UAAU,wBACX,wBAAIA,UAAU,SAASsB,GAAIpB,KAAK/C,MAAM6C,WAAYD,GAClD,yBAAKC,UAAU,eAAeE,KAAKzE,MAAM8F,OAG7C,0BAAMC,SAAYtB,KAAKnD,cACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQ0E,GAAG,IAAIzB,UAAU,QACrB,2BAAQG,KAAK,OACLhB,KAAK,OACLa,UAAU,eACVI,YAAY,SACZE,SAAUJ,KAAKjB,cACfkC,UAAQ,KAIpB,yBAAKnB,UAAU,uBACX,2BAAQG,KAAK,OACLhB,KAAK,WACLa,UAAU,eACVI,YAAY,WACZE,SAAUJ,KAAKjB,cACfkC,UAAQ,KAIpB,yBAAKnB,UAAU,uBACP,2BAAQG,KAAK,QACLhB,KAAK,QACLa,UAAU,eACVsB,GAAG,8BACHlB,YAAY,SACZE,SAAUJ,KAAKjB,cACfkC,UAAQ,KAIxB,yBAAKnB,UAAU,uBACX,2BAAQG,KAAK,WACLhB,KAAK,OACLa,UAAU,eACVsB,GAAG,iBACHlB,YAAY,gBACZE,SAAUJ,KAAKjB,cACfkC,UAAQ,KAIpB,yBAAKnB,UAAU,wBACX,2BAAQG,KAAK,MACLhB,KAAK,QACLa,UAAU,eACVI,YAAY,cACZC,QAAQ,uBACRC,SAAUJ,KAAKjB,cACfkC,UAAQ,KAIpB,yBAAKnB,UAAU,wBACX,4BAAQA,UAAU,eACVb,KAAK,aACLmB,SAAUJ,KAAKjB,eACf,4BAAQiC,SAAO,GAAf,eACHT,IAIT,yBAAKT,UAAU,wBACVgB,GAGL,yBAAKhB,UAAU,wBACX,4BAAQA,UAAU,eACVb,KAAK,UACLmB,SAAUJ,KAAKjB,eACf,4BAAQiC,SAAO,GAAf,2BACHP,IAIT,yBAAKX,UAAU,wBAAwBc,GACvC,yBAAKd,UAAU,wBAAwBe,GACvC,yBAAKf,UAAU,wBAAwBzE,IAI3C,yBAAKyE,UAAU,yBACX,2BAAOG,KAAK,WACJH,UAAU,mBACVsB,GAAG,gBACHH,UAAQ,IAGhB,2BAAOnB,UAAU,mBAAmB0B,QAAQ,iBAA5C,4BAGA,uBAAGC,KAAK,kFAAR,6CAEJ,kBAAC,IAAD,CAAQ3B,UAAU,YAAY4B,MAAM,UAAUC,SAAU3B,KAAK/C,MAAM2B,MAAOqB,KAAK,UAA/E,yB,GAxVD2B,IAAMC,WCOVC,E,iLAdP,OACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,yBAAKjC,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkC,KAAM,MAAOC,UAAW,SAAC1G,GAAD,OAAW,kBAAC,EAAD,CAAM8C,QAAS,KAAKjB,OAAQ7B,OACtE,kBAAC,IAAD,CAAOyG,KAAK,MAAMC,UAAW,SAAC1G,GAAD,OAAW,kBAAC,EAAD,CAAM8C,QAAS,KAAKjB,OAAQ7B,OACpE,kBAAC,IAAD,CAAOyG,KAAK,MAAMC,UAAW,SAAC1G,GAAD,OAAW,kBAAC,EAAD,CAAM8C,QAAS,KAAKjB,OAAQ7B,c,GARxEqG,IAAMC,WCGpBK,EAAYC,SAASC,eAAe,QAE1CC,IAASC,OAAO,kBAAC,EAAD,MAAUJ,GHwHpB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAM3G,MAAK,SAAA4G,GACjCA,EAAaC,kB","file":"static/js/main.0143b495.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\nimport referal from '../assets/referal.json'\nimport exps from '../assets/exps.json'\nimport careers from '../assets/careers.json'\nimport '../styles/Form.css'\nimport conf from '../config.json'\n\nconst url = conf.backURL + conf.port\nlet universities = {}\nlet alert = \"\"\nlet code  = \"\"\n\nclass Form extends React.Component{    \n    constructor(props){\n        super(props)\n        this.state = {\n            form:{\n                name:       {value: ''},\n                lastName:   {value: ''},\n                email:      {value: ''},\n                pass:       {value: ''},\n                phone:      {value: ''},\n                university: {value: ''},\n                exp:        {value: ''},\n                referal:    {value: ''},\n                prom_code:  {value: ' '},\n                lc:         {value: ''},\n                career:     {value: ''},\n                englishLevel:{value: ''},\n                selected_program: {value: ''},\n                source:     {value: ' '}\n            },\n            title : '',\n            className : '',\n            params: ' ',\n            program: this.props.program,\n            loading: true,\n            arrUniversities: [],\n            arrRefs: [],\n            arrExps: [],\n            arrCars: [],\n            alert: false,\n            check: false,\n            error: 0\n        };\n\n        this.changeHandler = this.changeHandler.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }    \n\n    componentDidMount() {\n        this.fetchData() \n        let tform = this.state.form\n        \n        let getParams = this.props.params.location.search\n        let l = getParams.length\n        let pars = getParams.substring(1,l).split(\"&\");\n        pars.map(param => {\n            let ps = param.split(\"=\")\n            if(ps[0] === \"code\" && ps[1] === \"yes\")\n                code = <input  type=\"input\"\n                        className=\"form-control\"\n                        name=\"prom_code\"\n                        placeholder=\"Código de promoción\"\n                        pattern=\"[0-9]*$\"\n                        onChange={this.changeHandler} />            \n        })\n\n        switch (this.state.program) {\n            case \"gv\":\n                tform.selected_program = { value: ['1'] }\n                this.setState({\n                    form: tform,\n                    program: \"gv\",\n                    title: \"Voluntario Global\",\n                    className: \"titleGV\"\n                })\n                break;\n            case \"gt\":\n                    tform.selected_program = { value: ['2'] }\n                    this.setState({\n                        form: tform,\n                        program: \"gt\",\n                        title: \"Talento Global\",\n                        className: \"titleGT\"\n                    })\n                break;\n            case \"ge\":\n                    tform.selected_program = { value: ['5'] }\n                    this.setState({\n                        form: tform,\n                        program: \"ge\",\n                        title: \"Emprendedor Global\",\n                        className: \"titleGE\"\n                    })\n                break;\n            default:\n                break;\n        }\n    }\n    \n    fetchData = async () => {        \n        this.setState({\n            loading: true,\n            error: null\n        })\n        \n        try {\n            universities = await fetch(url+\"/universities\").then(res => res.json())                                        \n            this.setState({\n                loading: false,\n                arrUniversities: Object.keys(universities).sort(),\n                lc: universities,\n                arrRefs: referal.referal,\n                arrExps: exps.exps,\n                arrCars: careers.cars\n            })\n        } catch (error) {\n            this.setState({\n                loading: false,\n                error: error\n            })\n        }\n    }   \n\n    handleSubmit = async e => {\n        e.preventDefault();\n        let tform = this.state.form\n\n        let params = \" \"\n        let getParams = this.props.params.location.search\n        let l = getParams.length\n        let pars = getParams.substring(1,l).split(\"&\");\n        pars.map(param => {\n            let ps = param.split(\"=\")            \n            if(ps[0] === \"src\") tform.params = ps[1]            \n            else tform.params = \" \"\n        })\n\n        let reg = /\\s/g\n        universities = await fetch(url+\"/universities\").then(res => res.json())\n        for(let u in universities){\n            let str = u.replace(reg, '')\n            str = str.replace(reg, '')\n            universities[str] = universities[u]\n            delete universities[u]\n        }\n        \n        let un = tform.university.value.replace(reg,'')\n        un = un.replace(reg,'')\n        tform.lc = universities[ un ]\n        this.setState({ tform });\n        \n        let getURL = url + '/' +this.state.program\n        fetch(getURL, {\n            method: 'POST',\n            mode: 'no-cors',            \n            body: JSON.stringify({...this.state.form}),\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\n\t\t\t}\n        }).then(res => this.setState({error: 1, check: true}))\n        .catch(err => this.setState({error: 2}))\n    }         \n\n    changeHandler = event => {              \n        const name = event.target.name;\n        const value = event.target.value;    \n                    \n        this.setState({\n          form: {\n              ...this.state.form,\n              [name]: {\n              ...this.state.form[name],\n              value\n            }\n          }\n        });\n    }\n\n    render() {        \n        \n        if(this.state.loading === true){\n            console.log('Loading Universities');            \n            return 'Loading Universities...'\n        }\n        \n        let listUs = this.state.arrUniversities;\n        let opU = listUs.map( u => \n            <option key={u}>{u}</option>\n        )\n\n        let listRfs = this.state.arrRefs;\n        let opRfs = listRfs.map( u => \n            <option key={u}>{u}</option>\n        )\n\n        let listXps = this.state.arrExps;\n        let opXps = listXps.map( u => \n            <option key={u}>{u}</option>\n        )\n\n        let listCars = this.state.arrCars;\n        let opCar = listCars.map( u => \n            <option key={u}>{u}</option>\n        )\n\n        let deg = \"\"\n        let engLvl = \"\"\n        let vExp = \"\"\n        let gte = this.state.program === \"gt\" | this.state.program === \"ge\" \n        let gve = this.state.program === \"gv\"       \n        \n        if(gve){\n            vExp = <select className=\"form-control\"\n                name=\"exp\"\n                onChange={this.changeHandler}>  \n                <option default>Quiero vivir mi experiencia porque..</option>                          \n                {opXps}\n            </select>\n        }\n\n        if( gte ){\n            deg = <select className=\"form-control\"\n                        name=\"career\"\n                        onChange={this.changeHandler}\n                        required>  \n                        <option  defaultValue>Carrera</option>                                        \n                        {opCar}\n                    </select>\n\n            engLvl = <select className=\"form-control\"\n                        name=\"englishLevel\"\n                        onChange={this.changeHandler}>  \n                        <option  defaultValue>Nivel de Inglés</option>\n                        <option>Básico</option>\n                        <option>Intermedio</option>\n                        <option>Avanzado</option>\n                    </select>\n        }\n\n        let err = this.state.error\n        \n        if(err === 1)\n            alert = <div className=\"alert alert-success\" role=\"alert\">\n                Te has registrado correctamente.\n            </div>\n        else if(err === 2)\n            alert = <div className=\"alert alert-danger\" role=\"alert\">\n                Ha ocurrido un error, intentalo de nuevo más tarde.\n            </div>\n\n        let title = this.state.title\n        return (\n            <div>\n                <div>{alert}</div>\n                <div className=\"form-group container\">\n                    <h2 className=\"header\" id={this.state.className}>{title}</h2>\n                    <div className=\"col s12 m12\">{this.props.desc}</div>\n                </div>     \n\n                <form onSubmit = {this.handleSubmit} >                    \n                    <MDBRow>                        \n                        <MDBCol md=\"6\" className=\"mb-3\">\n                            <input  type=\"text\" \n                                    name=\"name\"\n                                    className=\"form-control\" \n                                    placeholder=\"Nombre\"\n                                    onChange={this.changeHandler}\n                                    required\n                            />                            \n                        </MDBCol>\n                        \n                        <div className=\"form-group col-md-6\">\n                            <input  type=\"text\" \n                                    name=\"lastName\"\n                                    className=\"form-control\" \n                                    placeholder=\"Apellido\" \n                                    onChange={this.changeHandler}\n                                    required\n                            />\n                        </div>\n\n                        <div className=\"form-group col-md-6\">\n                                <input  type=\"email\" \n                                        name=\"email\"\n                                        className=\"form-control\" \n                                        id=\"defaultFormRegisterEmailEx2\"\n                                        placeholder=\"Correo\" \n                                        onChange={this.changeHandler}\n                                        required\n                                />\n                        </div>\n                        \n                        <div className=\"form-group col-md-6\">\n                            <input  type=\"password\" \n                                    name=\"pass\"\n                                    className=\"form-control\" \n                                    id=\"inputPassword4\" \n                                    placeholder=\"Contraseña\" \n                                    onChange={this.changeHandler}\n                                    required      \n                            />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <input  type=\"tel\" \n                                    name=\"phone\"\n                                    className=\"form-control\" \n                                    placeholder=\"Teléfono\" \n                                    pattern=\"^\\d{3}\\d{3}\\d{4}$\" \n                                    onChange={this.changeHandler}\n                                    required\n                            />\n                        </div>\n\n                        <div className=\"form-group col-md-12\" >\n                            <select className=\"form-control\"\n                                    name=\"university\"\n                                    onChange={this.changeHandler} >  \n                                    <option default>Universidad</option>                                        \n                                {opU}\n                            </select>\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            {vExp}\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <select className=\"form-control\"\n                                    name=\"referal\"\n                                    onChange={this.changeHandler}>  \n                                    <option default>Llegué acá por...</option>                          \n                                {opRfs}\n                            </select>\n                        </div>\n\n                        <div className=\"form-group col-md-12\">{deg}</div>\n                        <div className=\"form-group col-md-12\">{engLvl}</div>\n                        <div className=\"form-group col-md-12\">{code}</div>\n                        \n                    </MDBRow>\n\n                    <div className=\"form-group form-check\">\n                        <input type=\"checkbox\" \n                                className=\"form-check-input\"\n                                id=\"exampleCheck1\"\n                                required\n                                 />\n\n                        <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n                            Estoy de acuerdo con los \n                        </label>\n                        <a href=\"http://aieseccolombia.org/wp-content/uploads/2017/02/AVISO-DE-PRIVACIDAD-1.pdf\"> términos y condiciones de privacidad</a>\n                    </div>\n                    <MDBBtn className=\"col-md-12\" color=\"primary\" disabled={this.state.check} type=\"submit\">\n                        Crear mi cuenta                    \n                    </MDBBtn>\n                </form>                     \n            </div>\n        )\n    };\n}\n\nexport default Form;                ","import React from 'react';\nimport { HashRouter, BrowserRouter, Route } from 'react-router-dom'\nimport Form from '../components/Form'\n\nclass NewEP extends React.Component{    \n    render() {\n        return (\n            <HashRouter basename='/'>\n                <div className=\"container\">\n                    <BrowserRouter >                \n                        <Route path={\"/gv\"} component={(props) => <Form program =\"gv\" params={props}/>}/>\n                        <Route path=\"/gt\" component={(props) => <Form program =\"gt\" params={props}/>}/>\n                        <Route path=\"/ge\" component={(props) => <Form program =\"ge\" params={props}/>}/>\n                    </BrowserRouter>\n                </div>    \n            </HashRouter>\n        );\n    }\n}\n\nexport default NewEP;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './global.css'\nimport NewEP from './pages/NewEP'\n\nconst container = document.getElementById('root');\n\nReactDOM.render(<NewEP/>, container);\n\nserviceWorker.unregister()\n"],"sourceRoot":""}